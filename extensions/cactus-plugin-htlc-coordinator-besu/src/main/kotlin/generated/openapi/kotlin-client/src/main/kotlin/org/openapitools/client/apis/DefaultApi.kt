/**
 * Hyperledger Cactus Plugin - HTLC Coordinator
 *
 * Can exchange assets between networks
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.CounterpartyHTLCRequest
import org.openapitools.client.models.OwnHTLCRequest
import org.openapitools.client.models.WithdrawCounterpartyRequest

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://www.cactus.stream")
        }
    }

    /**
    * Create an instance to interact with the counterparty HTLC
    * 
    * @param counterpartyHTLCRequest  (optional)
    * @return kotlin.Any
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun counterpartyHtlcV1(counterpartyHTLCRequest: CounterpartyHTLCRequest?) : kotlin.Any {
        val localVarResponse = counterpartyHtlcV1WithHttpInfo(counterpartyHTLCRequest = counterpartyHTLCRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create an instance to interact with the counterparty HTLC
    * 
    * @param counterpartyHTLCRequest  (optional)
    * @return ApiResponse<kotlin.Any?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun counterpartyHtlcV1WithHttpInfo(counterpartyHTLCRequest: CounterpartyHTLCRequest?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = counterpartyHtlcV1RequestConfig(counterpartyHTLCRequest = counterpartyHTLCRequest)

        return request<CounterpartyHTLCRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation counterpartyHtlcV1
    *
    * @param counterpartyHTLCRequest  (optional)
    * @return RequestConfig
    */
    fun counterpartyHtlcV1RequestConfig(counterpartyHTLCRequest: CounterpartyHTLCRequest?) : RequestConfig<CounterpartyHTLCRequest> {
        val localVariableBody = counterpartyHTLCRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-coordinator-besu/counterparty-htlc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Create an instance to interact with the own HTLC.
    * 
    * @param ownHTLCRequest  (optional)
    * @return kotlin.Any
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ownHtlcV1(ownHTLCRequest: OwnHTLCRequest?) : kotlin.Any {
        val localVarResponse = ownHtlcV1WithHttpInfo(ownHTLCRequest = ownHTLCRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Create an instance to interact with the own HTLC.
    * 
    * @param ownHTLCRequest  (optional)
    * @return ApiResponse<kotlin.Any?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ownHtlcV1WithHttpInfo(ownHTLCRequest: OwnHTLCRequest?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = ownHtlcV1RequestConfig(ownHTLCRequest = ownHTLCRequest)

        return request<OwnHTLCRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation ownHtlcV1
    *
    * @param ownHTLCRequest  (optional)
    * @return RequestConfig
    */
    fun ownHtlcV1RequestConfig(ownHTLCRequest: OwnHTLCRequest?) : RequestConfig<OwnHTLCRequest> {
        val localVariableBody = ownHTLCRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-coordinator-besu/own-htlc",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Withdraw funds of the counterparty HTLC
    * 
    * @param withdrawCounterpartyRequest  (optional)
    * @return kotlin.Any
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun withdrawCounterpartyV1(withdrawCounterpartyRequest: WithdrawCounterpartyRequest?) : kotlin.Any {
        val localVarResponse = withdrawCounterpartyV1WithHttpInfo(withdrawCounterpartyRequest = withdrawCounterpartyRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Any
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Withdraw funds of the counterparty HTLC
    * 
    * @param withdrawCounterpartyRequest  (optional)
    * @return ApiResponse<kotlin.Any?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun withdrawCounterpartyV1WithHttpInfo(withdrawCounterpartyRequest: WithdrawCounterpartyRequest?) : ApiResponse<kotlin.Any?> {
        val localVariableConfig = withdrawCounterpartyV1RequestConfig(withdrawCounterpartyRequest = withdrawCounterpartyRequest)

        return request<WithdrawCounterpartyRequest, kotlin.Any>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation withdrawCounterpartyV1
    *
    * @param withdrawCounterpartyRequest  (optional)
    * @return RequestConfig
    */
    fun withdrawCounterpartyV1RequestConfig(withdrawCounterpartyRequest: WithdrawCounterpartyRequest?) : RequestConfig<WithdrawCounterpartyRequest> {
        val localVariableBody = withdrawCounterpartyRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-coordinator-besu/withdraw-counterparty",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
