/**
 * Hyperledger Cactus Plugin - HTLC-ETH Besu
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.GetSingleStatusRequest
import org.openapitools.client.models.GetStatusRequest
import org.openapitools.client.models.InitializeRequest
import org.openapitools.client.models.InvokeContractV1Response
import org.openapitools.client.models.NewContractObj
import org.openapitools.client.models.RefundReq
import org.openapitools.client.models.RunTransactionResponse
import org.openapitools.client.models.WithdrawReq

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * 
    * 
    * @param getSingleStatusRequest  (optional)
    * @return kotlin.Int
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getSingleStatusV1(getSingleStatusRequest: GetSingleStatusRequest?) : kotlin.Int {
        val localVarResponse = getSingleStatusV1WithHttpInfo(getSingleStatusRequest = getSingleStatusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Int
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param getSingleStatusRequest  (optional)
    * @return ApiResponse<kotlin.Int?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getSingleStatusV1WithHttpInfo(getSingleStatusRequest: GetSingleStatusRequest?) : ApiResponse<kotlin.Int?> {
        val localVariableConfig = getSingleStatusV1RequestConfig(getSingleStatusRequest = getSingleStatusRequest)

        return request<GetSingleStatusRequest, kotlin.Int>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getSingleStatusV1
    *
    * @param getSingleStatusRequest  (optional)
    * @return RequestConfig
    */
    fun getSingleStatusV1RequestConfig(getSingleStatusRequest: GetSingleStatusRequest?) : RequestConfig<GetSingleStatusRequest> {
        val localVariableBody = getSingleStatusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu/get-single-status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param getStatusRequest  (optional)
    * @return kotlin.collections.List<kotlin.Int>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getStatusV1(getStatusRequest: GetStatusRequest?) : kotlin.collections.List<kotlin.Int> {
        val localVarResponse = getStatusV1WithHttpInfo(getStatusRequest = getStatusRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<kotlin.Int>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param getStatusRequest  (optional)
    * @return ApiResponse<kotlin.collections.List<kotlin.Int>?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getStatusV1WithHttpInfo(getStatusRequest: GetStatusRequest?) : ApiResponse<kotlin.collections.List<kotlin.Int>?> {
        val localVariableConfig = getStatusV1RequestConfig(getStatusRequest = getStatusRequest)

        return request<GetStatusRequest, kotlin.collections.List<kotlin.Int>>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getStatusV1
    *
    * @param getStatusRequest  (optional)
    * @return RequestConfig
    */
    fun getStatusV1RequestConfig(getStatusRequest: GetStatusRequest?) : RequestConfig<GetStatusRequest> {
        val localVariableBody = getStatusRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu/get-status",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param initializeRequest  (optional)
    * @return RunTransactionResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun initializeV1(initializeRequest: InitializeRequest?) : RunTransactionResponse {
        val localVarResponse = initializeV1WithHttpInfo(initializeRequest = initializeRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RunTransactionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param initializeRequest  (optional)
    * @return ApiResponse<RunTransactionResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun initializeV1WithHttpInfo(initializeRequest: InitializeRequest?) : ApiResponse<RunTransactionResponse?> {
        val localVariableConfig = initializeV1RequestConfig(initializeRequest = initializeRequest)

        return request<InitializeRequest, RunTransactionResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation initializeV1
    *
    * @param initializeRequest  (optional)
    * @return RequestConfig
    */
    fun initializeV1RequestConfig(initializeRequest: InitializeRequest?) : RequestConfig<InitializeRequest> {
        val localVariableBody = initializeRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu/initialize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param newContractObj  (optional)
    * @return InvokeContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun newContractV1(newContractObj: NewContractObj?) : InvokeContractV1Response {
        val localVarResponse = newContractV1WithHttpInfo(newContractObj = newContractObj)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param newContractObj  (optional)
    * @return ApiResponse<InvokeContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun newContractV1WithHttpInfo(newContractObj: NewContractObj?) : ApiResponse<InvokeContractV1Response?> {
        val localVariableConfig = newContractV1RequestConfig(newContractObj = newContractObj)

        return request<NewContractObj, InvokeContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation newContractV1
    *
    * @param newContractObj  (optional)
    * @return RequestConfig
    */
    fun newContractV1RequestConfig(newContractObj: NewContractObj?) : RequestConfig<NewContractObj> {
        val localVariableBody = newContractObj
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu/new-contract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param refundReq  (optional)
    * @return InvokeContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun refundV1(refundReq: RefundReq?) : InvokeContractV1Response {
        val localVarResponse = refundV1WithHttpInfo(refundReq = refundReq)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param refundReq  (optional)
    * @return ApiResponse<InvokeContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun refundV1WithHttpInfo(refundReq: RefundReq?) : ApiResponse<InvokeContractV1Response?> {
        val localVariableConfig = refundV1RequestConfig(refundReq = refundReq)

        return request<RefundReq, InvokeContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation refundV1
    *
    * @param refundReq  (optional)
    * @return RequestConfig
    */
    fun refundV1RequestConfig(refundReq: RefundReq?) : RequestConfig<RefundReq> {
        val localVariableBody = refundReq
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu/refund",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * 
    * 
    * @param withdrawReq  (optional)
    * @return InvokeContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun withdrawV1(withdrawReq: WithdrawReq?) : InvokeContractV1Response {
        val localVarResponse = withdrawV1WithHttpInfo(withdrawReq = withdrawReq)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * 
    * 
    * @param withdrawReq  (optional)
    * @return ApiResponse<InvokeContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun withdrawV1WithHttpInfo(withdrawReq: WithdrawReq?) : ApiResponse<InvokeContractV1Response?> {
        val localVariableConfig = withdrawV1RequestConfig(withdrawReq = withdrawReq)

        return request<WithdrawReq, InvokeContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation withdrawV1
    *
    * @param withdrawReq  (optional)
    * @return RequestConfig
    */
    fun withdrawV1RequestConfig(withdrawReq: WithdrawReq?) : RequestConfig<WithdrawReq> {
        val localVariableBody = withdrawReq
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-htlc-eth-besu/withdraw",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
