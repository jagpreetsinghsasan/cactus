/**
 * Hyperledger Cactus Plugin - Connector Xdai
 *
 * Can perform basic tasks on a Xdai ledger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.DeployContractJsonObjectV1Request
import org.openapitools.client.models.DeployContractV1Request
import org.openapitools.client.models.DeployContractV1Response
import org.openapitools.client.models.InvokeContractJsonObjectV1Request
import org.openapitools.client.models.InvokeContractV1Request
import org.openapitools.client.models.InvokeContractV1Response
import org.openapitools.client.models.RunTransactionV1Request
import org.openapitools.client.models.RunTransactionV1Response

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractJsonObjectV1Request  (optional)
    * @return DeployContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deployContractJsonObjectV1(deployContractJsonObjectV1Request: DeployContractJsonObjectV1Request?) : DeployContractV1Response {
        val localVarResponse = deployContractJsonObjectV1WithHttpInfo(deployContractJsonObjectV1Request = deployContractJsonObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeployContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractJsonObjectV1Request  (optional)
    * @return ApiResponse<DeployContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deployContractJsonObjectV1WithHttpInfo(deployContractJsonObjectV1Request: DeployContractJsonObjectV1Request?) : ApiResponse<DeployContractV1Response?> {
        val localVariableConfig = deployContractJsonObjectV1RequestConfig(deployContractJsonObjectV1Request = deployContractJsonObjectV1Request)

        return request<DeployContractJsonObjectV1Request, DeployContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deployContractJsonObjectV1
    *
    * @param deployContractJsonObjectV1Request  (optional)
    * @return RequestConfig
    */
    fun deployContractJsonObjectV1RequestConfig(deployContractJsonObjectV1Request: DeployContractJsonObjectV1Request?) : RequestConfig<DeployContractJsonObjectV1Request> {
        val localVariableBody = deployContractJsonObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/deploy-contract-solidity-bytecode-json-object",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractV1Request  (optional)
    * @return DeployContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deployContractV1(deployContractV1Request: DeployContractV1Request?) : DeployContractV1Response {
        val localVarResponse = deployContractV1WithHttpInfo(deployContractV1Request = deployContractV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeployContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractV1Request  (optional)
    * @return ApiResponse<DeployContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deployContractV1WithHttpInfo(deployContractV1Request: DeployContractV1Request?) : ApiResponse<DeployContractV1Response?> {
        val localVariableConfig = deployContractV1RequestConfig(deployContractV1Request = deployContractV1Request)

        return request<DeployContractV1Request, DeployContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deployContractV1
    *
    * @param deployContractV1Request  (optional)
    * @return RequestConfig
    */
    fun deployContractV1RequestConfig(deployContractV1Request: DeployContractV1Request?) : RequestConfig<DeployContractV1Request> {
        val localVariableBody = deployContractV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/deploy-contract-solidity-bytecode",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the Prometheus Metrics
    * 
    * @return kotlin.String
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPrometheusMetricsV1() : kotlin.String {
        val localVarResponse = getPrometheusMetricsV1WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the Prometheus Metrics
    * 
    * @return ApiResponse<kotlin.String?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPrometheusMetricsV1WithHttpInfo() : ApiResponse<kotlin.String?> {
        val localVariableConfig = getPrometheusMetricsV1RequestConfig()

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getPrometheusMetricsV1
    *
    * @return RequestConfig
    */
    fun getPrometheusMetricsV1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/get-prometheus-exporter-metrics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Invokes a contract on a besu ledger
    * 
    * @param invokeContractJsonObjectV1Request  (optional)
    * @return InvokeContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun invokeContractJsonObject(invokeContractJsonObjectV1Request: InvokeContractJsonObjectV1Request?) : InvokeContractV1Response {
        val localVarResponse = invokeContractJsonObjectWithHttpInfo(invokeContractJsonObjectV1Request = invokeContractJsonObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Invokes a contract on a besu ledger
    * 
    * @param invokeContractJsonObjectV1Request  (optional)
    * @return ApiResponse<InvokeContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun invokeContractJsonObjectWithHttpInfo(invokeContractJsonObjectV1Request: InvokeContractJsonObjectV1Request?) : ApiResponse<InvokeContractV1Response?> {
        val localVariableConfig = invokeContractJsonObjectRequestConfig(invokeContractJsonObjectV1Request = invokeContractJsonObjectV1Request)

        return request<InvokeContractJsonObjectV1Request, InvokeContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation invokeContractJsonObject
    *
    * @param invokeContractJsonObjectV1Request  (optional)
    * @return RequestConfig
    */
    fun invokeContractJsonObjectRequestConfig(invokeContractJsonObjectV1Request: InvokeContractJsonObjectV1Request?) : RequestConfig<InvokeContractJsonObjectV1Request> {
        val localVariableBody = invokeContractJsonObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/invoke-contract-json-object",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Invokes a contract on a xdai ledger
    * 
    * @param invokeContractV1Request  (optional)
    * @return InvokeContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun invokeContractV1(invokeContractV1Request: InvokeContractV1Request?) : InvokeContractV1Response {
        val localVarResponse = invokeContractV1WithHttpInfo(invokeContractV1Request = invokeContractV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Invokes a contract on a xdai ledger
    * 
    * @param invokeContractV1Request  (optional)
    * @return ApiResponse<InvokeContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun invokeContractV1WithHttpInfo(invokeContractV1Request: InvokeContractV1Request?) : ApiResponse<InvokeContractV1Response?> {
        val localVariableConfig = invokeContractV1RequestConfig(invokeContractV1Request = invokeContractV1Request)

        return request<InvokeContractV1Request, InvokeContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation invokeContractV1
    *
    * @param invokeContractV1Request  (optional)
    * @return RequestConfig
    */
    fun invokeContractV1RequestConfig(invokeContractV1Request: InvokeContractV1Request?) : RequestConfig<InvokeContractV1Request> {
        val localVariableBody = invokeContractV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/invoke-contract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Executes a transaction on a xdai ledger
    * 
    * @param runTransactionV1Request  (optional)
    * @return RunTransactionV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun runTransactionV1(runTransactionV1Request: RunTransactionV1Request?) : RunTransactionV1Response {
        val localVarResponse = runTransactionV1WithHttpInfo(runTransactionV1Request = runTransactionV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RunTransactionV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Executes a transaction on a xdai ledger
    * 
    * @param runTransactionV1Request  (optional)
    * @return ApiResponse<RunTransactionV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun runTransactionV1WithHttpInfo(runTransactionV1Request: RunTransactionV1Request?) : ApiResponse<RunTransactionV1Response?> {
        val localVariableConfig = runTransactionV1RequestConfig(runTransactionV1Request = runTransactionV1Request)

        return request<RunTransactionV1Request, RunTransactionV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation runTransactionV1
    *
    * @param runTransactionV1Request  (optional)
    * @return RequestConfig
    */
    fun runTransactionV1RequestConfig(runTransactionV1Request: RunTransactionV1Request?) : RequestConfig<RunTransactionV1Request> {
        val localVariableBody = runTransactionV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-xdai/run-transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
