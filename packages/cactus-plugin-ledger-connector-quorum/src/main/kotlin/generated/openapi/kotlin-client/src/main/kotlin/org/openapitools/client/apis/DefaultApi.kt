/**
 * Hyperledger Cactus Plugin - Connector Quorum
 *
 * Can perform basic tasks on a Quorum ledger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.DeployContractSolidityBytecodeJsonObjectV1Request
import org.openapitools.client.models.DeployContractSolidityBytecodeV1Request
import org.openapitools.client.models.DeployContractSolidityBytecodeV1Response
import org.openapitools.client.models.InvokeContractJsonObjectV1Request
import org.openapitools.client.models.InvokeContractV1Request
import org.openapitools.client.models.InvokeContractV1Response
import org.openapitools.client.models.InvokeRawWeb3EthContractV1Request
import org.openapitools.client.models.InvokeRawWeb3EthContractV1Response
import org.openapitools.client.models.InvokeRawWeb3EthMethodV1Request
import org.openapitools.client.models.InvokeRawWeb3EthMethodV1Response
import org.openapitools.client.models.RunTransactionRequest
import org.openapitools.client.models.RunTransactionResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractSolidityBytecodeJsonObjectV1Request  (optional)
    * @return DeployContractSolidityBytecodeV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deployContractSolBytecodeJsonObjectV1(deployContractSolidityBytecodeJsonObjectV1Request: DeployContractSolidityBytecodeJsonObjectV1Request?) : DeployContractSolidityBytecodeV1Response {
        val localVarResponse = deployContractSolBytecodeJsonObjectV1WithHttpInfo(deployContractSolidityBytecodeJsonObjectV1Request = deployContractSolidityBytecodeJsonObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeployContractSolidityBytecodeV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractSolidityBytecodeJsonObjectV1Request  (optional)
    * @return ApiResponse<DeployContractSolidityBytecodeV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deployContractSolBytecodeJsonObjectV1WithHttpInfo(deployContractSolidityBytecodeJsonObjectV1Request: DeployContractSolidityBytecodeJsonObjectV1Request?) : ApiResponse<DeployContractSolidityBytecodeV1Response?> {
        val localVariableConfig = deployContractSolBytecodeJsonObjectV1RequestConfig(deployContractSolidityBytecodeJsonObjectV1Request = deployContractSolidityBytecodeJsonObjectV1Request)

        return request<DeployContractSolidityBytecodeJsonObjectV1Request, DeployContractSolidityBytecodeV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deployContractSolBytecodeJsonObjectV1
    *
    * @param deployContractSolidityBytecodeJsonObjectV1Request  (optional)
    * @return RequestConfig
    */
    fun deployContractSolBytecodeJsonObjectV1RequestConfig(deployContractSolidityBytecodeJsonObjectV1Request: DeployContractSolidityBytecodeJsonObjectV1Request?) : RequestConfig<DeployContractSolidityBytecodeJsonObjectV1Request> {
        val localVariableBody = deployContractSolidityBytecodeJsonObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/deploy-contract-solidity-bytecode-json-object",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractSolidityBytecodeV1Request  (optional)
    * @return DeployContractSolidityBytecodeV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request: DeployContractSolidityBytecodeV1Request?) : DeployContractSolidityBytecodeV1Response {
        val localVarResponse = deployContractSolBytecodeV1WithHttpInfo(deployContractSolidityBytecodeV1Request = deployContractSolidityBytecodeV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeployContractSolidityBytecodeV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractSolidityBytecodeV1Request  (optional)
    * @return ApiResponse<DeployContractSolidityBytecodeV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deployContractSolBytecodeV1WithHttpInfo(deployContractSolidityBytecodeV1Request: DeployContractSolidityBytecodeV1Request?) : ApiResponse<DeployContractSolidityBytecodeV1Response?> {
        val localVariableConfig = deployContractSolBytecodeV1RequestConfig(deployContractSolidityBytecodeV1Request = deployContractSolidityBytecodeV1Request)

        return request<DeployContractSolidityBytecodeV1Request, DeployContractSolidityBytecodeV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deployContractSolBytecodeV1
    *
    * @param deployContractSolidityBytecodeV1Request  (optional)
    * @return RequestConfig
    */
    fun deployContractSolBytecodeV1RequestConfig(deployContractSolidityBytecodeV1Request: DeployContractSolidityBytecodeV1Request?) : RequestConfig<DeployContractSolidityBytecodeV1Request> {
        val localVariableBody = deployContractSolidityBytecodeV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/deploy-contract-solidity-bytecode",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the Prometheus Metrics
    * 
    * @return kotlin.String
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPrometheusMetricsV1() : kotlin.String {
        val localVarResponse = getPrometheusMetricsV1WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the Prometheus Metrics
    * 
    * @return ApiResponse<kotlin.String?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPrometheusMetricsV1WithHttpInfo() : ApiResponse<kotlin.String?> {
        val localVariableConfig = getPrometheusMetricsV1RequestConfig()

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getPrometheusMetricsV1
    *
    * @return RequestConfig
    */
    fun getPrometheusMetricsV1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/get-prometheus-exporter-metrics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Invokes a contract on a besu ledger
    * 
    * @param invokeContractV1Request  (optional)
    * @return InvokeContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun invokeContractV1(invokeContractV1Request: InvokeContractV1Request?) : InvokeContractV1Response {
        val localVarResponse = invokeContractV1WithHttpInfo(invokeContractV1Request = invokeContractV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Invokes a contract on a besu ledger
    * 
    * @param invokeContractV1Request  (optional)
    * @return ApiResponse<InvokeContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun invokeContractV1WithHttpInfo(invokeContractV1Request: InvokeContractV1Request?) : ApiResponse<InvokeContractV1Response?> {
        val localVariableConfig = invokeContractV1RequestConfig(invokeContractV1Request = invokeContractV1Request)

        return request<InvokeContractV1Request, InvokeContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation invokeContractV1
    *
    * @param invokeContractV1Request  (optional)
    * @return RequestConfig
    */
    fun invokeContractV1RequestConfig(invokeContractV1Request: InvokeContractV1Request?) : RequestConfig<InvokeContractV1Request> {
        val localVariableBody = invokeContractV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/invoke-contract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Invokes a contract on a besu ledger
    * 
    * @param invokeContractJsonObjectV1Request  (optional)
    * @return InvokeContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun invokeContractV1NoKeychain(invokeContractJsonObjectV1Request: InvokeContractJsonObjectV1Request?) : InvokeContractV1Response {
        val localVarResponse = invokeContractV1NoKeychainWithHttpInfo(invokeContractJsonObjectV1Request = invokeContractJsonObjectV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Invokes a contract on a besu ledger
    * 
    * @param invokeContractJsonObjectV1Request  (optional)
    * @return ApiResponse<InvokeContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun invokeContractV1NoKeychainWithHttpInfo(invokeContractJsonObjectV1Request: InvokeContractJsonObjectV1Request?) : ApiResponse<InvokeContractV1Response?> {
        val localVariableConfig = invokeContractV1NoKeychainRequestConfig(invokeContractJsonObjectV1Request = invokeContractJsonObjectV1Request)

        return request<InvokeContractJsonObjectV1Request, InvokeContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation invokeContractV1NoKeychain
    *
    * @param invokeContractJsonObjectV1Request  (optional)
    * @return RequestConfig
    */
    fun invokeContractV1NoKeychainRequestConfig(invokeContractJsonObjectV1Request: InvokeContractJsonObjectV1Request?) : RequestConfig<InvokeContractJsonObjectV1Request> {
        val localVariableBody = invokeContractJsonObjectV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/invoke-contract-json-object",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Low-level endpoint to invoke a method on deployed contract.
    * 
    * @param invokeRawWeb3EthContractV1Request  (optional)
    * @return InvokeRawWeb3EthContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun invokeRawWeb3EthContractV1(invokeRawWeb3EthContractV1Request: InvokeRawWeb3EthContractV1Request?) : InvokeRawWeb3EthContractV1Response {
        val localVarResponse = invokeRawWeb3EthContractV1WithHttpInfo(invokeRawWeb3EthContractV1Request = invokeRawWeb3EthContractV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeRawWeb3EthContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Low-level endpoint to invoke a method on deployed contract.
    * 
    * @param invokeRawWeb3EthContractV1Request  (optional)
    * @return ApiResponse<InvokeRawWeb3EthContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun invokeRawWeb3EthContractV1WithHttpInfo(invokeRawWeb3EthContractV1Request: InvokeRawWeb3EthContractV1Request?) : ApiResponse<InvokeRawWeb3EthContractV1Response?> {
        val localVariableConfig = invokeRawWeb3EthContractV1RequestConfig(invokeRawWeb3EthContractV1Request = invokeRawWeb3EthContractV1Request)

        return request<InvokeRawWeb3EthContractV1Request, InvokeRawWeb3EthContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation invokeRawWeb3EthContractV1
    *
    * @param invokeRawWeb3EthContractV1Request  (optional)
    * @return RequestConfig
    */
    fun invokeRawWeb3EthContractV1RequestConfig(invokeRawWeb3EthContractV1Request: InvokeRawWeb3EthContractV1Request?) : RequestConfig<InvokeRawWeb3EthContractV1Request> {
        val localVariableBody = invokeRawWeb3EthContractV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/invoke-raw-web3eth-contract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Invoke any method from web3.eth (low-level)
    * 
    * @param invokeRawWeb3EthMethodV1Request  (optional)
    * @return InvokeRawWeb3EthMethodV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun invokeWeb3EthMethodV1(invokeRawWeb3EthMethodV1Request: InvokeRawWeb3EthMethodV1Request?) : InvokeRawWeb3EthMethodV1Response {
        val localVarResponse = invokeWeb3EthMethodV1WithHttpInfo(invokeRawWeb3EthMethodV1Request = invokeRawWeb3EthMethodV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeRawWeb3EthMethodV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Invoke any method from web3.eth (low-level)
    * 
    * @param invokeRawWeb3EthMethodV1Request  (optional)
    * @return ApiResponse<InvokeRawWeb3EthMethodV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun invokeWeb3EthMethodV1WithHttpInfo(invokeRawWeb3EthMethodV1Request: InvokeRawWeb3EthMethodV1Request?) : ApiResponse<InvokeRawWeb3EthMethodV1Response?> {
        val localVariableConfig = invokeWeb3EthMethodV1RequestConfig(invokeRawWeb3EthMethodV1Request = invokeRawWeb3EthMethodV1Request)

        return request<InvokeRawWeb3EthMethodV1Request, InvokeRawWeb3EthMethodV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation invokeWeb3EthMethodV1
    *
    * @param invokeRawWeb3EthMethodV1Request  (optional)
    * @return RequestConfig
    */
    fun invokeWeb3EthMethodV1RequestConfig(invokeRawWeb3EthMethodV1Request: InvokeRawWeb3EthMethodV1Request?) : RequestConfig<InvokeRawWeb3EthMethodV1Request> {
        val localVariableBody = invokeRawWeb3EthMethodV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/invoke-raw-web3eth-method",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Executes a transaction on a quorum ledger
    * 
    * @param runTransactionRequest  (optional)
    * @return RunTransactionResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun runTransactionV1(runTransactionRequest: RunTransactionRequest?) : RunTransactionResponse {
        val localVarResponse = runTransactionV1WithHttpInfo(runTransactionRequest = runTransactionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RunTransactionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Executes a transaction on a quorum ledger
    * 
    * @param runTransactionRequest  (optional)
    * @return ApiResponse<RunTransactionResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun runTransactionV1WithHttpInfo(runTransactionRequest: RunTransactionRequest?) : ApiResponse<RunTransactionResponse?> {
        val localVariableConfig = runTransactionV1RequestConfig(runTransactionRequest = runTransactionRequest)

        return request<RunTransactionRequest, RunTransactionResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation runTransactionV1
    *
    * @param runTransactionRequest  (optional)
    * @return RequestConfig
    */
    fun runTransactionV1RequestConfig(runTransactionRequest: RunTransactionRequest?) : RequestConfig<RunTransactionRequest> {
        val localVariableBody = runTransactionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-quorum/run-transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
