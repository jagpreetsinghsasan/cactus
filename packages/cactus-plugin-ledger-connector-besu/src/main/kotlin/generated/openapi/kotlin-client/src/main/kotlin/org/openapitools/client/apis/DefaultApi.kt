/**
 * Hyperledger Cactus Plugin - Connector Besu
 *
 * Can perform basic tasks on a Besu ledger
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import java.io.IOException

import org.openapitools.client.models.DeployContractSolidityBytecodeV1Request
import org.openapitools.client.models.DeployContractSolidityBytecodeV1Response
import org.openapitools.client.models.GetBalanceV1Request
import org.openapitools.client.models.GetBalanceV1Response
import org.openapitools.client.models.GetBesuRecordV1Request
import org.openapitools.client.models.GetBesuRecordV1Response
import org.openapitools.client.models.GetBlockV1Request
import org.openapitools.client.models.GetBlockV1Response
import org.openapitools.client.models.GetPastLogsV1Request
import org.openapitools.client.models.GetPastLogsV1Response
import org.openapitools.client.models.GetTransactionV1Request
import org.openapitools.client.models.GetTransactionV1Response
import org.openapitools.client.models.InvokeContractV1Request
import org.openapitools.client.models.InvokeContractV1Response
import org.openapitools.client.models.RunTransactionRequest
import org.openapitools.client.models.RunTransactionResponse
import org.openapitools.client.models.SignTransactionRequest
import org.openapitools.client.models.SignTransactionResponse

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class DefaultApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractSolidityBytecodeV1Request  (optional)
    * @return DeployContractSolidityBytecodeV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deployContractSolBytecodeV1(deployContractSolidityBytecodeV1Request: DeployContractSolidityBytecodeV1Request?) : DeployContractSolidityBytecodeV1Response {
        val localVarResponse = deployContractSolBytecodeV1WithHttpInfo(deployContractSolidityBytecodeV1Request = deployContractSolidityBytecodeV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DeployContractSolidityBytecodeV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Deploys the bytecode of a Solidity contract.
    * 
    * @param deployContractSolidityBytecodeV1Request  (optional)
    * @return ApiResponse<DeployContractSolidityBytecodeV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun deployContractSolBytecodeV1WithHttpInfo(deployContractSolidityBytecodeV1Request: DeployContractSolidityBytecodeV1Request?) : ApiResponse<DeployContractSolidityBytecodeV1Response?> {
        val localVariableConfig = deployContractSolBytecodeV1RequestConfig(deployContractSolidityBytecodeV1Request = deployContractSolidityBytecodeV1Request)

        return request<DeployContractSolidityBytecodeV1Request, DeployContractSolidityBytecodeV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation deployContractSolBytecodeV1
    *
    * @param deployContractSolidityBytecodeV1Request  (optional)
    * @return RequestConfig
    */
    fun deployContractSolBytecodeV1RequestConfig(deployContractSolidityBytecodeV1Request: DeployContractSolidityBytecodeV1Request?) : RequestConfig<DeployContractSolidityBytecodeV1Request> {
        val localVariableBody = deployContractSolidityBytecodeV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/deploy-contract-solidity-bytecode",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Return balance of an address of a given block
    * 
    * @param getBalanceV1Request  (optional)
    * @return GetBalanceV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getBalanceV1(getBalanceV1Request: GetBalanceV1Request?) : GetBalanceV1Response {
        val localVarResponse = getBalanceV1WithHttpInfo(getBalanceV1Request = getBalanceV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetBalanceV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Return balance of an address of a given block
    * 
    * @param getBalanceV1Request  (optional)
    * @return ApiResponse<GetBalanceV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getBalanceV1WithHttpInfo(getBalanceV1Request: GetBalanceV1Request?) : ApiResponse<GetBalanceV1Response?> {
        val localVariableConfig = getBalanceV1RequestConfig(getBalanceV1Request = getBalanceV1Request)

        return request<GetBalanceV1Request, GetBalanceV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getBalanceV1
    *
    * @param getBalanceV1Request  (optional)
    * @return RequestConfig
    */
    fun getBalanceV1RequestConfig(getBalanceV1Request: GetBalanceV1Request?) : RequestConfig<GetBalanceV1Request> {
        val localVariableBody = getBalanceV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-balance",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
    * 
    * @param getBesuRecordV1Request  (optional)
    * @return GetBesuRecordV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getBesuRecordV1(getBesuRecordV1Request: GetBesuRecordV1Request?) : GetBesuRecordV1Response {
        val localVarResponse = getBesuRecordV1WithHttpInfo(getBesuRecordV1Request = getBesuRecordV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetBesuRecordV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Retrieves an arbitrary record (any piece of information) from the ledger. Ledger records can be call outputs, transaction input, etc.
    * 
    * @param getBesuRecordV1Request  (optional)
    * @return ApiResponse<GetBesuRecordV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getBesuRecordV1WithHttpInfo(getBesuRecordV1Request: GetBesuRecordV1Request?) : ApiResponse<GetBesuRecordV1Response?> {
        val localVariableConfig = getBesuRecordV1RequestConfig(getBesuRecordV1Request = getBesuRecordV1Request)

        return request<GetBesuRecordV1Request, GetBesuRecordV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getBesuRecordV1
    *
    * @param getBesuRecordV1Request  (optional)
    * @return RequestConfig
    */
    fun getBesuRecordV1RequestConfig(getBesuRecordV1Request: GetBesuRecordV1Request?) : RequestConfig<GetBesuRecordV1Request> {
        val localVariableBody = getBesuRecordV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-besu-record",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Returns a block matching the block
    * 
    * @param getBlockV1Request  (optional)
    * @return GetBlockV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getBlockV1(getBlockV1Request: GetBlockV1Request?) : GetBlockV1Response {
        val localVarResponse = getBlockV1WithHttpInfo(getBlockV1Request = getBlockV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetBlockV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Returns a block matching the block
    * 
    * @param getBlockV1Request  (optional)
    * @return ApiResponse<GetBlockV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getBlockV1WithHttpInfo(getBlockV1Request: GetBlockV1Request?) : ApiResponse<GetBlockV1Response?> {
        val localVariableConfig = getBlockV1RequestConfig(getBlockV1Request = getBlockV1Request)

        return request<GetBlockV1Request, GetBlockV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getBlockV1
    *
    * @param getBlockV1Request  (optional)
    * @return RequestConfig
    */
    fun getBlockV1RequestConfig(getBlockV1Request: GetBlockV1Request?) : RequestConfig<GetBlockV1Request> {
        val localVariableBody = getBlockV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-block",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Gets past logs, matching the given options.
    * 
    * @param getPastLogsV1Request  (optional)
    * @return GetPastLogsV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPastLogsV1(getPastLogsV1Request: GetPastLogsV1Request?) : GetPastLogsV1Response {
        val localVarResponse = getPastLogsV1WithHttpInfo(getPastLogsV1Request = getPastLogsV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetPastLogsV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Gets past logs, matching the given options.
    * 
    * @param getPastLogsV1Request  (optional)
    * @return ApiResponse<GetPastLogsV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPastLogsV1WithHttpInfo(getPastLogsV1Request: GetPastLogsV1Request?) : ApiResponse<GetPastLogsV1Response?> {
        val localVariableConfig = getPastLogsV1RequestConfig(getPastLogsV1Request = getPastLogsV1Request)

        return request<GetPastLogsV1Request, GetPastLogsV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getPastLogsV1
    *
    * @param getPastLogsV1Request  (optional)
    * @return RequestConfig
    */
    fun getPastLogsV1RequestConfig(getPastLogsV1Request: GetPastLogsV1Request?) : RequestConfig<GetPastLogsV1Request> {
        val localVariableBody = getPastLogsV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-past-logs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Get the Prometheus Metrics
    * 
    * @return kotlin.String
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getPrometheusMetricsV1() : kotlin.String {
        val localVarResponse = getPrometheusMetricsV1WithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Get the Prometheus Metrics
    * 
    * @return ApiResponse<kotlin.String?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getPrometheusMetricsV1WithHttpInfo() : ApiResponse<kotlin.String?> {
        val localVariableConfig = getPrometheusMetricsV1RequestConfig()

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getPrometheusMetricsV1
    *
    * @return RequestConfig
    */
    fun getPrometheusMetricsV1RequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-prometheus-exporter-metrics",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Executes a transaction on a besu ledger
    * 
    * @param getTransactionV1Request  (optional)
    * @return GetTransactionV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getTransactionV1(getTransactionV1Request: GetTransactionV1Request?) : GetTransactionV1Response {
        val localVarResponse = getTransactionV1WithHttpInfo(getTransactionV1Request = getTransactionV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetTransactionV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Executes a transaction on a besu ledger
    * 
    * @param getTransactionV1Request  (optional)
    * @return ApiResponse<GetTransactionV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getTransactionV1WithHttpInfo(getTransactionV1Request: GetTransactionV1Request?) : ApiResponse<GetTransactionV1Response?> {
        val localVariableConfig = getTransactionV1RequestConfig(getTransactionV1Request = getTransactionV1Request)

        return request<GetTransactionV1Request, GetTransactionV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation getTransactionV1
    *
    * @param getTransactionV1Request  (optional)
    * @return RequestConfig
    */
    fun getTransactionV1RequestConfig(getTransactionV1Request: GetTransactionV1Request?) : RequestConfig<GetTransactionV1Request> {
        val localVariableBody = getTransactionV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/get-transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Invokes a contract on a besu ledger
    * 
    * @param invokeContractV1Request  (optional)
    * @return InvokeContractV1Response
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun invokeContractV1(invokeContractV1Request: InvokeContractV1Request?) : InvokeContractV1Response {
        val localVarResponse = invokeContractV1WithHttpInfo(invokeContractV1Request = invokeContractV1Request)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InvokeContractV1Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Invokes a contract on a besu ledger
    * 
    * @param invokeContractV1Request  (optional)
    * @return ApiResponse<InvokeContractV1Response?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun invokeContractV1WithHttpInfo(invokeContractV1Request: InvokeContractV1Request?) : ApiResponse<InvokeContractV1Response?> {
        val localVariableConfig = invokeContractV1RequestConfig(invokeContractV1Request = invokeContractV1Request)

        return request<InvokeContractV1Request, InvokeContractV1Response>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation invokeContractV1
    *
    * @param invokeContractV1Request  (optional)
    * @return RequestConfig
    */
    fun invokeContractV1RequestConfig(invokeContractV1Request: InvokeContractV1Request?) : RequestConfig<InvokeContractV1Request> {
        val localVariableBody = invokeContractV1Request
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/invoke-contract",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Executes a transaction on a besu ledger
    * 
    * @param runTransactionRequest  (optional)
    * @return RunTransactionResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun runTransactionV1(runTransactionRequest: RunTransactionRequest?) : RunTransactionResponse {
        val localVarResponse = runTransactionV1WithHttpInfo(runTransactionRequest = runTransactionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RunTransactionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Executes a transaction on a besu ledger
    * 
    * @param runTransactionRequest  (optional)
    * @return ApiResponse<RunTransactionResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun runTransactionV1WithHttpInfo(runTransactionRequest: RunTransactionRequest?) : ApiResponse<RunTransactionResponse?> {
        val localVariableConfig = runTransactionV1RequestConfig(runTransactionRequest = runTransactionRequest)

        return request<RunTransactionRequest, RunTransactionResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation runTransactionV1
    *
    * @param runTransactionRequest  (optional)
    * @return RequestConfig
    */
    fun runTransactionV1RequestConfig(runTransactionRequest: RunTransactionRequest?) : RequestConfig<RunTransactionRequest> {
        val localVariableBody = runTransactionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/run-transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Obtain signatures of ledger from the corresponding transaction hash.
    * Obtain signatures of ledger from the corresponding transaction hash.
    * @param signTransactionRequest  
    * @return SignTransactionResponse
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun signTransactionV1(signTransactionRequest: SignTransactionRequest) : SignTransactionResponse {
        val localVarResponse = signTransactionV1WithHttpInfo(signTransactionRequest = signTransactionRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SignTransactionResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Obtain signatures of ledger from the corresponding transaction hash.
    * Obtain signatures of ledger from the corresponding transaction hash.
    * @param signTransactionRequest  
    * @return ApiResponse<SignTransactionResponse?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun signTransactionV1WithHttpInfo(signTransactionRequest: SignTransactionRequest) : ApiResponse<SignTransactionResponse?> {
        val localVariableConfig = signTransactionV1RequestConfig(signTransactionRequest = signTransactionRequest)

        return request<SignTransactionRequest, SignTransactionResponse>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation signTransactionV1
    *
    * @param signTransactionRequest  
    * @return RequestConfig
    */
    fun signTransactionV1RequestConfig(signTransactionRequest: SignTransactionRequest) : RequestConfig<SignTransactionRequest> {
        val localVariableBody = signTransactionRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v1/plugins/@hyperledger/cactus-plugin-ledger-connector-besu/sign-transaction",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
