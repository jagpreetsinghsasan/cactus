/**
* Hyperledger Core API
* Contains/describes the core API types for Cactus. Does not describe actual endpoints on its own as this is left to the implementing plugins who can import and re-use commonly needed type definitions from this specification. One example of said commonly used type definitions would be the types related to consortium management, cactus nodes, ledgers, etc..
*
* The version of the OpenAPI document: 0.2.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.client.models


import com.squareup.moshi.Json

/**
* Enumerates a list of consensus algorithm families in existence. Does not intend to be an exhaustive list, just a practical one, meaning that we only include items here that are relevant to Hyperledger Cactus in fulfilling its own duties. This can be extended later as more sophisticated features of Cactus get implemented. This enum is meant to be first and foremost a useful abstraction for achieving practical tasks, not an encyclopedia and therefore we ask of everyone that this to be extended only in ways that serve a practical purpose for the runtime behavior of Cactus or Cactus plugins in general. The bottom line is that we can accept this enum being not 100% accurate as long as it 100% satisfies what it was designed to do.
* Values: aUTHORITY,sTAKE,wORK
*/


enum class ConsensusAlgorithmFamily(val value: kotlin.String) {


    @Json(name = "org.hyperledger.cactus.consensusalgorithm.PROOF_OF_AUTHORITY")
    aUTHORITY("org.hyperledger.cactus.consensusalgorithm.PROOF_OF_AUTHORITY"),

    @Json(name = "org.hyperledger.cactus.consensusalgorithm.PROOF_OF_STAKE")
    sTAKE("org.hyperledger.cactus.consensusalgorithm.PROOF_OF_STAKE"),

    @Json(name = "org.hyperledger.cactus.consensusalgorithm.PROOF_OF_WORK")
    wORK("org.hyperledger.cactus.consensusalgorithm.PROOF_OF_WORK");


    /**
    This override toString avoids using the enum var name and uses the actual api value instead.
    In cases the var name and value are different, the client would send incorrect enums to the server.
    **/
    override fun toString(): String {
        return value
    }
}

